package main

import (
	"cashback_bot/internal/config"
	nestedFormatter "github.com/antonfisher/nested-logrus-formatter"
	log "github.com/sirupsen/logrus"
	fsm "github.com/vitaliy-ukiru/fsm-telebot"
	"github.com/vitaliy-ukiru/fsm-telebot/storages/memory"
	"gopkg.in/telebot.v3"
	"time"
)

var (
	QuestionSG        = fsm.NewStateGroup("question")
	WaitQuestionState = QuestionSG.New("print")

	firstButton  = telebot.Btn{Text: "–Ø –±—ã —Ö–æ—Ç–µ–ª(–∞) –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", Unique: "NoFeedback"}
	secondButton = telebot.Btn{Text: "–Ø —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤", Unique: "feedback"} //TODO –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∫—Ä–∏–ø–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ, –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	thirdButton  = telebot.Btn{Text: "–£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å(–ø—Ä–æ–±–ª–µ–º–∞)", Unique: "question"}
	//TODO –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏–º–µ–Ω–∏, –∞—Ä—Ç–∏–∫—É–ª–∞, –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
)

func main() {
	log.SetFormatter(&nestedFormatter.Formatter{
		NoColors:        true,
		TimestampFormat: "2006-01-02 15:04:05.000",
	})

	config := config.GetConfig()

	level, err := log.ParseLevel(config.LogLevel)
	if err != nil {
		log.Fatal(err)
	}
	log.SetLevel(level)

	bot, err := telebot.NewBot(telebot.Settings{
		Token:     config.BotToken,
		Poller:    &telebot.LongPoller{Timeout: 60 * time.Second},
		ParseMode: telebot.ModeMarkdown,
		//Verbose:   true,
	})
	if err != nil {
		log.Fatal(err)
	}

	storage := memory.NewStorage()
	defer storage.Close()

	manager := fsm.NewManager(bot.Group(), storage)

	bot.Handle("/start", OnStart(firstButton, secondButton, thirdButton))

	bot.Handle(&firstButton, OnWantToFeedBack(secondButton))
	bot.Handle(&secondButton, OnFeedBackExist())
	manager.Bind(&thirdButton, fsm.DefaultState, OnQuestion)

	manager.Bind(telebot.OnText, WaitQuestionState, OnPrintQuestion(bot, config.AdminChatID))
	manager.Bind(telebot.OnText, fsm.AnyState, OnAnswerFromAdmin(bot, config.AdminChatID))

	bot.Start()
}

func OnStart(firstButton, secondButton, thirdButton telebot.Btn) telebot.HandlerFunc {
	menu := &telebot.ReplyMarkup{}
	menu.Inline(
		menu.Row(firstButton),
		menu.Row(secondButton),
		menu.Row(thirdButton),
	)
	menu.ResizeKeyboard = true
	return func(context telebot.Context) error {
		log.Debugf("New user with id: %d", context.Chat().ID)
		return context.Send("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ SHIMA!\n\n"+
			"–•–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å –í–∞–º –∫–µ—à–±–µ–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ 100 —Ä—É–± –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –≤–∞—à—É –∫–∞—Ä—Ç—É.\n\n"+
			"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–±–µ–∫–∞ –í–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –ø—Ä–æ–¥—É–∫—Ç–µ –Ω–∞ WB.\n"+
			"–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –º–æ–∂–µ—Ç –í—ã —É–∂–µ —É—Å–ø–µ–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?", menu)
	}
}

func OnWantToFeedBack(button telebot.Btn) telebot.HandlerFunc {
	menu := &telebot.ReplyMarkup{}
	menu.Inline(
		menu.Row(button),
	)
	return func(context telebot.Context) error {
		log.Debugf("[%d]: %s", context.Chat().ID, "wants to write a review")
		return context.Send("1) –ó–∞–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ WB\n"+
			"2) –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ \"–û—Ç–∑—ã–≤—ã –∏ –≤–æ–ø—Ä–æ—Å—ã\"\n"+
			"3) –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –æ—Ç–∑—ã–≤–∞ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç\n"+
			"4) –í —Ç–µ—á–µ–Ω–∏–µ 6 —á–∞—Å–æ–≤ –º—ã –≤–∞–º –ø—Ä–∏—à–ª–µ–º –∫–µ—à–±–µ–∫.\nüôÇ", menu)
	}
}

func OnFeedBackExist() telebot.HandlerFunc {
	return func(context telebot.Context) error {
		log.Debugf("[%d]: %s", context.Chat().ID, "The review exists")
		return context.Send("–û—Ç–ª–∏—á–Ω–æ! üòä\n\n" +
			"–ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞, –í–∞–º –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –≠—Ç–æ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–µ 8 —à–∞–≥–æ–≤ :\n" +
			"1) –ó–∞–π–¥–∏—Ç–µ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.\n" +
			"2) –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ‚Äú–ü–æ–∫—É–ø–∫–∏‚Äù\n" +
			"3) –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏\n" +
			"4) –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ ‚Äú–û—Ç–∑—ã–≤‚Äù - > ‚Äú–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤‚Äù\n" +
			"5) –ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–º –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–∞—à —Ç–æ–≤–∞—Ä, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n" +
			"6) –ö–ª–∏–∫–Ω–∏—Ç–µ ‚Äú–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤‚Äù\n" +
			"7) –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤ –Ω–∞—à —á–∞—Ç-–±–æ—Ç.\n" +
			"8) –í —Ç–µ—á–µ–Ω–∏–µ 6 —á–∞—Å–æ–≤ –º—ã –≤–∞–º –ø—Ä–∏—à–ª–µ–º –∫—ç—à–±–µ–∫.")
	}
}

func OnQuestion(context telebot.Context, state fsm.FSMContext) error {
	log.Debugf("[%d]: %s", context.Chat().ID, "has a question")
	state.Set(WaitQuestionState)
	return context.Send("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ—Ç–æ—Ä–æ–π –í—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤—Å–µ –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ä–µ—à–∏–º –ø—Ä–æ–±–ª–µ–º—ãüëå")
}

func OnPrintQuestion(bot *telebot.Bot, adminChatID int64) fsm.Handler {
	return func(context telebot.Context, state fsm.FSMContext) error {
		_, err := bot.Forward(telebot.ChatID(adminChatID), context.Message())
		if err != nil {
			log.Error(err)
		}
		state.Set(fsm.DefaultState)
		return context.Send("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
	}
}

func OnAnswerFromAdmin(bot *telebot.Bot, adminChatID int64) fsm.Handler {
	return func(context telebot.Context, state fsm.FSMContext) error {
		if context.Message().IsReply() && context.Chat().ID == adminChatID {
			log.Debug(context.Message().ReplyTo.OriginalSender.ID)
			_, err := bot.Copy(context.Message().ReplyTo.OriginalSender, context.Message())
			return err
		} else {
			return nil
		}
	}
}
