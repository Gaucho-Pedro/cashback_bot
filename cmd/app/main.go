package main

import (
	"cashback_bot/internal/config"
	nestedFormatter "github.com/antonfisher/nested-logrus-formatter"
	log "github.com/sirupsen/logrus"
	fsm "github.com/vitaliy-ukiru/fsm-telebot"
	"github.com/vitaliy-ukiru/fsm-telebot/storages/memory"
	"gopkg.in/telebot.v3"
	"regexp"
	"time"
)

var (
	QuestionSG        = fsm.NewStateGroup("question")
	WaitQuestionState = QuestionSG.New("print")

	InputSG               = fsm.NewStateGroup("Input")
	InputPhotoState       = InputSG.New("photo")
	InputNameState        = InputSG.New("name")
	InputPartNumberState  = InputSG.New("partNumber")
	InputPhoneNumberState = InputSG.New("phoneNumber")

	firstButton    = telebot.Btn{Text: "–Ø –±—ã —Ö–æ—Ç–µ–ª(–∞) –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", Unique: "NoFeedback"}
	secondButton   = telebot.Btn{Text: "–Ø —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤", Unique: "feedback"}
	thirdButton    = telebot.Btn{Text: "–£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å(–ø—Ä–æ–±–ª–µ–º–∞)", Unique: "question"}
	mainMenuButton = telebot.Btn{Text: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"}
)

func main() {
	log.SetFormatter(&nestedFormatter.Formatter{
		NoColors:        true,
		TimestampFormat: "2006-01-02 15:04:05.000",
	})

	level, err := log.ParseLevel(config.GetConfig().LogLevel)
	if err != nil {
		log.Fatal(err)
	}
	log.SetLevel(level)

	bot, err := telebot.NewBot(telebot.Settings{
		Token:     config.GetConfig().BotToken,
		Poller:    &telebot.LongPoller{Timeout: 20 * time.Second}, // TODO: –ü–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ –Ω–æ–≤—ã–º –ø–æ–ª–ª–µ—Ä–æ–º —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
		ParseMode: telebot.ModeMarkdown,
		//Verbose:   true,
	})
	if err != nil {
		log.Fatal(err)
	}

	storage := memory.NewStorage()
	defer storage.Close()

	manager := fsm.NewManager(bot.Group(), storage)

	manager.Bind("/start", fsm.AnyState, OnStart(firstButton, secondButton, thirdButton, mainMenuButton))
	manager.Bind(&mainMenuButton, fsm.AnyState, OnMainMenu(firstButton, secondButton, thirdButton))
	bot.Handle(&firstButton, OnWantToFeedBack(secondButton))

	manager.Bind(&secondButton, fsm.DefaultState, OnFeedBackExist)
	manager.Bind(&thirdButton, fsm.DefaultState, OnQuestion)

	manager.Bind(telebot.OnText, WaitQuestionState, OnPrintQuestion())
	manager.Bind(telebot.OnText, fsm.DefaultState, OnAnswerFromAdmin(bot)) //TODO –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º

	manager.Bind(telebot.OnPhoto, InputPhotoState, OnInputPhoto)
	manager.Bind(telebot.OnText, InputPhotoState, OnInputPhoto)
	manager.Bind(telebot.OnDocument, InputPhotoState, OnInputPhoto)

	manager.Bind(telebot.OnText, InputNameState, OnInputName)
	manager.Bind(telebot.OnText, InputPartNumberState, OnInputPartNumber)
	manager.Bind(telebot.OnText, InputPhoneNumberState, OnInputPhoneNumber)

	bot.Start()
}

func OnStart(firstButton, secondButton, thirdButton, mainMenuButton telebot.Btn) fsm.Handler {
	menu := &telebot.ReplyMarkup{}
	menu.Inline(
		menu.Row(firstButton),
		menu.Row(secondButton),
		menu.Row(thirdButton),
	)
	menu.ResizeKeyboard = true

	mainMenu := &telebot.ReplyMarkup{}
	mainMenu.Reply(
		mainMenu.Row(mainMenuButton))
	mainMenu.ResizeKeyboard = true

	return func(context telebot.Context, state fsm.FSMContext) error {
		log.Debugf("New user with id: %d", context.Chat().ID)
		state.Finish(true)
		context.Send("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ SHIMA!\n\n"+
			"–•–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å –í–∞–º –∫–µ—à–±–µ–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ 100 —Ä—É–± –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –∫–∞—Ä—Ç—É.\n\n"+
			"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–±–µ–∫–∞ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –ø—Ä–æ–¥—É–∫—Ç–µ –Ω–∞ Wildberries.\n", mainMenu)
		return context.Send("–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –º–æ–∂–µ—Ç –í—ã —É–∂–µ —É—Å–ø–µ–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?", menu)
	}
}

func OnMainMenu(firstButton, secondButton, thirdButton telebot.Btn) fsm.Handler {
	menu := &telebot.ReplyMarkup{}
	menu.Inline(
		menu.Row(firstButton),
		menu.Row(secondButton),
		menu.Row(thirdButton),
	)
	menu.ResizeKeyboard = true

	return func(context telebot.Context, state fsm.FSMContext) error {
		log.Debugf("[%d]: main menu", context.Chat().ID)
		state.Finish(true)
		return context.Send("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", menu)
	}
}

func OnWantToFeedBack(button telebot.Btn) telebot.HandlerFunc {
	menu := &telebot.ReplyMarkup{}
	menu.Inline(
		menu.Row(button),
	)
	return func(context telebot.Context) error {
		log.Debugf("[%d]: %s", context.Chat().ID, "wants to write a review")
		return context.Send(
			"–û—Ç–ª–∏—á–Ω–æ!\n"+
				"–≠—Ç–æ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–µ 7 —à–∞–≥–æ–≤ :\n"+
				"1) –ó–∞–π–¥–∏—Ç–µ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.\n"+
				"2) –ó–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª \"–ü–æ–∫—É–ø–∫–∏\"\n"+
				"3) –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —É –Ω–∞—Å\n"+
				"4) –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ \"–û—Ç–∑—ã–≤\" - > \"–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\"\n"+
				"5) –ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–º –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–∞—à —Ç–æ–≤–∞—Ä, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –ø–æ—Å—Ç–∞–≤—Ç–µ –æ—Ü–µ–Ω–∫—É\n"+
				"6) –ö–ª–∏–∫–Ω–∏—Ç–µ \"–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤\"\n"+
				"7) –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤ –Ω–∞—à —á–∞—Ç-–±–æ—Ç.\n", menu)
	}
}

func OnQuestion(context telebot.Context, state fsm.FSMContext) error {
	log.Debugf("[%d]: %s", context.Chat().ID, "has a question")
	state.Set(WaitQuestionState)
	return context.Send("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ—Ç–æ—Ä–æ–π –í—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤—Å–µ –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ä–µ—à–∏–º –ø—Ä–æ–±–ª–µ–º—ãüëå")
}

func OnPrintQuestion() fsm.Handler {
	return func(context telebot.Context, state fsm.FSMContext) error {
		err := context.ForwardTo(telebot.ChatID(config.GetConfig().AdminChatID))
		if err != nil {
			return err
		}
		//state.Set(fsm.DefaultState)
		state.Finish(true)
		return context.Send("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
	}
}

func OnAnswerFromAdmin(bot *telebot.Bot) fsm.Handler {
	return func(context telebot.Context, state fsm.FSMContext) error {
		if context.Message().IsReply() && context.Chat().ID == config.GetConfig().AdminChatID {
			log.Debug(context.Message().ReplyTo.OriginalSender.ID)
			_, err := bot.Copy(context.Message().ReplyTo.OriginalSender, context.Message())
			return err
		} else {
			return nil
		}
	}
}

func OnFeedBackExist(context telebot.Context, state fsm.FSMContext) error {
	log.Debugf("[%d]: %s", context.Chat().ID, "The review exists")
	state.Set(InputPhotoState)
	return context.Send("–ö–ª–∞—Å—Å!\n" +
		"–¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞, –≤–∞—à–µ –∏–º—è, –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n" +
		"–û—Ç–ø—Ä–∞–≤—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞ —Å—é–¥–∞")
}
func OnInputPhoto(context telebot.Context, state fsm.FSMContext) error {
	if context.Update().Message.Photo != nil {
		//TODO –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–∫—É
		log.Debug(context.Update().Message.Photo.File.FileSize)
		state.Set(InputNameState)
		return context.Send("–í–≤–µ–¥–∏—Ç–µ –∏–º—è, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ Wildberries\n" +
			"(–¢–æ–ª—å–∫–æ **–ò–º—è**, –±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏)")
	} else if context.Update().Message.Document != nil {
		return context.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –∫–∞–∫ \"–§–æ—Ç–æ\", –∞ –Ω–µ –∫–∞–∫ \"–§–∞–π–ª\".")
	} else {
		return context.Send("–û—Ç–ø—Ä–∞–≤—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ")
	}
}

func OnInputName(context telebot.Context, state fsm.FSMContext) error {
	//TODO –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ò–º—è
	state.Set(InputPartNumberState)
	return context.Send("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (9 –∑–Ω–∞–∫–æ–≤)\n\n" +
		"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB.\n" +
		"–ó–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª \"–ü—Ä–æ—Ñ–∏–ª—å\" - >\"–ü–æ–∫—É–ø–∫–∏\"\n" +
		"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä, —á—É—Ç—å –Ω–∏–∂–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∞—Ä—Ç–∏–∫—É–ª")
}

func OnInputPartNumber(context telebot.Context, state fsm.FSMContext) error {
	//TODO –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª https://www.wildberries.ru/catalog/116612372/detail.aspx
	matched, _ := regexp.MatchString("^[0-9]{9}$", context.Message().Text)
	if matched {
		state.Set(InputPhoneNumberState)
		return context.Send("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
	} else {
		return context.Send("–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª (9 –∑–Ω–∞–∫–æ–≤)")
	}
}

func OnInputPhoneNumber(context telebot.Context, state fsm.FSMContext) error {
	//TODO –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
	matched, _ := regexp.MatchString("^((\\+7|7|8)+([0-9]){10})$", context.Message().Text)
	if matched {
		state.Finish(true)
		return context.Send("–û—Ç–ª–∏—á–Ω–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à –æ—Ç–∑—ã–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–µ—à–±—ç–∫ –≤ —Ç–µ—á–µ–Ω–∏–∏ 6 —á–∞—Å–æ–≤")
	} else {
		return context.Send("–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
	}
}
